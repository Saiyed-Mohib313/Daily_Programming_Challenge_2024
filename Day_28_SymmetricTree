class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

public class Day_28_SymmetricTree {
    
    // Function to check if the tree is symmetric
    public boolean isSymmetric(TreeNode root) {
        if (root == null) {
            return true; // Empty tree is symmetric
        }
        return isMirror(root.left, root.right); // Check left and right subtrees
    }
    
    // Helper function to check if two trees are mirror images
    private boolean isMirror(TreeNode left, TreeNode right) {
        if (left == null && right == null) {
            return true; // Both are null, symmetric
        }
        if (left == null || right == null) {
            return false; // One is null and the other is not, not symmetric
        }
        return (left.val == right.val) // Values must match
                && isMirror(left.left, right.right) // Left subtree of left tree and right subtree of right tree
                && isMirror(left.right, right.left); // Right subtree of left tree and left subtree of right tree
    }

    public static void main(String[] args) {
        // Example test case: [1, 2, 2, 3, 4, 4, 3]
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(2);
        root.left.left = new TreeNode(3);
        root.left.right = new TreeNode(4);
        root.right.left = new TreeNode(4);
        root.right.right = new TreeNode(3);

        Day_27_SymmetricTree solution = new Day_27_SymmetricTree();
        boolean result = solution.isSymmetric(root);
        System.out.println("Output: " + result);  // Output: true
    }
}
